{"version":3,"sources":["../../src/api/createWallet.js"],"names":["wallets","config","db","id","load","req","callback","wallet","find","err","index","res","params","gasPrices","web3","cwallet","new_privatekey","new_address","mnemonic","seed","xpriv","xpub","path","bip39","generateMnemonic","mnemonicToSeed","console","log","Wallet","fromMasterSeed","derivePath","privateExtendedKey","publicExtendedKey","deriveChild","getWallet","getPrivateKey","toString","getAddress","json","create","body","length","push","read","update","key","sendStatus","delete","splice","indexOf"],"mappings":"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","file":"createWallet.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport Wallet from 'ethereumjs-wallet/hdkey';\nimport bip39 from 'bip39';\n\nconst wallets = [];\n\n//example of ethereum bip39 hd wallet\n// {\n//     \"response\": \"createWallet\",\n//     \"path\": \"m/44'/60'/0'/0\",\n//     \"index\": \"0\",\n//     \"mnemonic\": \"cook balance apple fork swallow early program refuse vicious month patient viable\",\n//     \"address\": \"0x85ae881433ba05d86b919a0dca7a63f0fe454259\",\n//     \"privatekey\": \"\"\n// }\n\nexport default ({ config, db }) => resource({\n\n\t/** Property name to store preloaded entity on `request`. */\n\tid : 'createWallet',\n\n\t/** For requests with an `id`, you can auto-load the entity.\n\t *  Errors terminate the request, success sets `req[id] = data`.\n\t */\n\tload(req, id, callback) {\n\t\tlet wallet = wallets.find( wallet => wallet.id===id ),\n\t\t\terr = wallet ? null : 'Not found';\n\t\tcallback(null, wallet);\n\t},\n\n\t/** GET / - List all entities */\n\tindex({ params, gasPrices, web3 }, res) {\n\t\t//console.log(gasPrices);\n\t\t//console.log(web3);\n\n\t\tvar wallet,cwallet,new_privatekey,new_address;\n\t\tvar mnemonic,seed;\n\t\tvar xpriv,xpub;\n\t\tvar path,index;\n\n\t\tpath = \"m/44'/60'/0'/0\";//ethereum \n\t\t//path = \"m/\"+req.params.path+\"/\"+req.params.coin+\"'/0'/0\";\n\t\tindex = 0;\n\t\t//index = req.params.index,\n\n\t\tmnemonic = bip39.generateMnemonic(); //generates string\n\t\t//mnemonic = 'cook balance apple fork swallow early program refuse vicious month patient viable';\n\t \tseed = bip39.mnemonicToSeed(mnemonic); //creates seed buffer\n\n\t \tconsole.log('mnemonic',mnemonic);\n\t\tconsole.log('seed',seed);\n\t \t\n\t \twallet = Wallet.fromMasterSeed(seed);\n\t \twallet = wallet.derivePath(path);\n\t \txpriv = wallet.privateExtendedKey();\n\t \txpub = wallet.publicExtendedKey();\n\n\t \twallet = wallet.deriveChild(index);\n\t \tcwallet = wallet.getWallet();\n\n\t \txpriv = wallet.privateExtendedKey();\n\t \txpub = wallet.publicExtendedKey();\n\n\t \tnew_privatekey = cwallet.getPrivateKey().toString('hex');\n\t\tnew_address = '0x'+cwallet.getAddress().toString('hex');\n\n\t\tconsole.log('wallet',wallet);\n\t\tconsole.log('cwallet',cwallet);\n\t\tconsole.log('new_privatekey',new_privatekey);\n\t\tconsole.log('new_address',new_address);\n\n\t\tres.json({\n\t\t\t'response':'createWallet',\n\t\t\t'path':path,\n\t\t\t'index':index,\n\t\t\t'mnemonic':mnemonic,\n\t\t\t//'seed':seed.toString('hex'),\n\t\t\t//'xpriv':xpriv,\n\t\t\t//'xpub':xpub,\n\t\t\t'address':new_address,\n\t\t\t'privatekey':new_privatekey\n\t\t});\n\n\t\t//res.json(wallets);\n\t},\n\n\t/** POST / - Create a new entity */\n\tcreate({ body }, res) {\n\t\tbody.id = wallets.length.toString(36);\n\t\twallets.push(body);\n\t\tres.json(body);\n\t},\n\n\t/** GET /:id - Return a given entity */\n\tread({ wallet }, res) {\n\t\tres.json(wallet);\n\t},\n\n\t/** PUT /:id - Update a given entity */\n\tupdate({ wallet, body }, res) {\n\t\t//console.log(arguments);\n\t\tfor (let key in body) {\n\t\t\tif (key!=='id') {\n\t\t\t\twallet[key] = body[key];\n\t\t\t}\n\t\t}\n\t\tres.sendStatus(204);\n\t},\n\n\t/** DELETE /:id - Delete a given entity */\n\tdelete({ wallet }, res) {\n\t\twallets.splice(wallets.indexOf(wallet), 1);\n\t\tres.sendStatus(204);\n\t}\n});\n"]}