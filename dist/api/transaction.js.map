{"version":3,"sources":["../../src/api/transaction.js"],"names":["wallets","config","db","id","load","req","callback","wallet","find","err","index","res","params","console","log","json","create","body","gasPrices","web3","details","nonce","privatekey","destination","amount","send","toHex","toWei","low","transaction","serializedTransaction","transactionId","url","getSenderAddress","EthereumTx","sign","Buffer","from","serialize","toString","eth","getTransactionCount","error","result","sendRawTransaction","JSON","stringify","read","update","key","sendStatus","delete","splice","indexOf"],"mappings":"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","file":"transaction.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport EthereumTx from 'ethereumjs-tx';\n\nconst wallets = [];\n\n// rinkerby ethereum faucet\n//account refer keyrock-testing-accounts\n// walletAddress[0] = {\n// 'publickey':'0x70DeFb7B30D575758ea0405ff26C3646CcCa0E10',\n// 'privatekey':''\n// };\n// ether-2.01\n\n// walletAddress[1] = {\n// 'publickey':'0x2d0e6fbef8e7322e59fb666be326a3ad88704718',\n// 'privatekey':''\n// };\n// ether-7.6\n\n// walletAddress[2] = {\n// 'publickey':'0x00ac8fbedd57107adbbb8a23d56cbf791bf0093e',\n// 'privatekey':''\n// };\n// ether-0.22\n\nexport default ({ config, db }) => resource({\n\n\t/** Property name to store preloaded entity on `request`. */\n\tid : 'transaction',\n\n\t/** For requests with an `id`, you can auto-load the entity.\n\t *  Errors terminate the request, success sets `req[id] = data`.\n\t */\n\tload(req, id, callback) {\n\t\tlet wallet = wallets.find( wallet => wallet.id===id ),\n\t\t\terr = wallet ? null : 'Not found';\n\t\tcallback(null, wallet);\n\t},\n\n\t/** GET / - List all entities */\n\tindex({ params }, res) {\n\t\tconsole.log('index call---');\n\t\tres.json(wallets);\n\t},\n\n\t/** POST / - Create a new entity */\n\tcreate({ body, gasPrices, web3 }, res) {\n\t\t//body.id = wallets.length.toString(36);\n\t\t//wallets.push(body);\n\t\tconsole.log('create call---');\n\t\tconsole.log('body',body);\n\n\t\tvar details,nonce;\n\t\tvar privatekey, destination, amount, send;\n\t\tprivatekey = body.privatekey;\n\t\tdestination = body.destination;\n\t\tamount = body.amount;\n\t\tsend = body.send;\n\n\t\tdetails = {\n\t\t    \"to\": destination,\n\t\t    \"value\": web3.toHex( web3.toWei(amount, 'ether') ),\n\t\t    \"gas\": 21000,\n\t\t    \"gasPrice\": gasPrices.low * 1000000000, // converts the gwei price to wei\n\t\t    //\"nonce\": nonce,\n\t\t    \"nonce\": \"0x00\",\n\t\t    \"chainId\": 4 // EIP 155 chainId - mainnet: 1, rinkeby: 4\n\t\t };\n\n\t\tconsole.log('gasPrices',gasPrices);\n\t\tconsole.log('details-before',details);\n\n\t\tvar transaction,serializedTransaction,transactionId,url,getSenderAddress;\n\t\ttransaction = new EthereumTx(details);\n\t\ttransaction.sign( Buffer.from(privatekey, 'hex') );\n\n\t\tserializedTransaction = transaction.serialize();\n\t\tgetSenderAddress = '0x' + transaction.getSenderAddress().toString('hex');\n\n\t\tconsole.log('serializedTransaction-before',serializedTransaction);\n\t\tconsole.log('getSenderAddress-before',getSenderAddress);\n\n\t\tweb3.eth.getTransactionCount(getSenderAddress,function (error, result) {\n\t\t\tif (error) {\n\t\t\t\tconsole.log('error',error)\n\t\t\t} else {\n\t\t\t\tconsole.log('result',result);\n\t\t\t\tnonce = result;\n\t\t\t\tdetails.nonce = nonce;\n\n\t\t\t\tconsole.log('nonce',nonce);\n\t\t\t\tconsole.log('details-after',details);\n\n\t\t\t\ttransaction = new EthereumTx(details);\n\t\t\t\ttransaction.sign( Buffer.from(privatekey, 'hex') );\n\n\t\t\t\tserializedTransaction = transaction.serialize();\n\t\t\t\tgetSenderAddress = '0x' + transaction.getSenderAddress().toString('hex');\n\n\t\t\t\tconsole.log('serializedTransaction-after',serializedTransaction);\n\t\t\t\tconsole.log('getSenderAddress-after',getSenderAddress);\n\n\t\t\t\tif(send){\n\t\t\t\t\tweb3.eth.sendRawTransaction('0x' + serializedTransaction.toString('hex'), function (error, result) {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\tconsole.log('error',error);\n\t\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\t\t'response':'transaction' ,\n\t\t\t\t\t\t\t\t\t'params':body,\n\t\t\t\t\t\t\t\t\t'gasPrices':gasPrices,\n\t\t\t\t\t\t\t\t\t'getSenderAddress': getSenderAddress,\n\t\t\t\t\t\t\t\t\t'error': JSON.stringify(error)\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.log('result',result);\n\t\t\t\t\t\t\t\ttransactionId = result;\n\n\t\t\t\t\t\t\t\turl = \"https://rinkeby.etherscan.io/tx/\"+transactionId;\n\t\t\t\t\t\t\t\tconsole.log('transactionId',transactionId);\n\t\t\t\t\t\t\t\tconsole.log('url', url);\n\n\t\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\t\t'response':'transaction' ,\n\t\t\t\t\t\t\t\t\t//'params':body,\n\t\t\t\t\t\t\t\t\t'gasPrices':gasPrices,\n\t\t\t\t\t\t\t\t\t'transactionId' : transactionId,\n\t\t\t\t\t\t\t\t\t'transactionUrl': url,\n\t\t\t\t\t\t\t\t\t'getSenderAddress': getSenderAddress\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}else{\n\t\t\t\t\tres.json({\n\t\t\t\t\t\t'response':'transaction' ,\n\t\t\t\t\t\t//'params':body,\n\t\t\t\t\t\t'gasPrices':gasPrices,\n\t\t\t\t\t\t//'transactionId' : transactionId,\n\t\t\t\t\t\t//'transactionUrl': url,\n\t\t\t\t\t\t'getSenderAddress': getSenderAddress\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t},\n\n\t/** GET /:id - Return a given entity */\n\tread({ wallet }, res) {\n\t\tres.json(wallet);\n\t},\n\n\t/** PUT /:id - Update a given entity */\n\tupdate({ wallet, body }, res) {\n\t\t//console.log(arguments);\n\t\tfor (let key in body) {\n\t\t\tif (key!=='id') {\n\t\t\t\twallet[key] = body[key];\n\t\t\t}\n\t\t}\n\t\tres.sendStatus(204);\n\t},\n\n\t/** DELETE /:id - Delete a given entity */\n\tdelete({ wallet }, res) {\n\t\twallets.splice(wallets.indexOf(wallet), 1);\n\t\tres.sendStatus(204);\n\t}\n});\n"]}