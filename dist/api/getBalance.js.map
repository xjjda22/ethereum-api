{"version":3,"sources":["../../src/api/getBalance.js"],"names":["wallets","config","db","id","load","callback","params","gasPrices","web3","wallet","find","err","index","res","console","log","json","create","body","length","toString","push","read","eth","getBalance","error","result","JSON","stringify","balance","fromWei","update","key","sendStatus","delete","splice","indexOf"],"mappings":"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","file":"getBalance.js","sourcesContent":["import resource from 'resource-router-middleware';\n\nconst wallets = [];\n\n// rinkerby ethereum faucet\n//account refer keyrock-testing-accounts\n// walletAddress[2] = {\n// 'publickey':'0x00ac8fbedd57107adbbb8a23d56cbf791bf0093e',\n// 'privatekey':''\n// };\n\nexport default ({ config, db }) => resource({\n\n\t/** Property name to store preloaded entity on `request`. */\n\tid : 'getBalance',\n\n\t/** For requests with an `id`, you can auto-load the entity.\n\t *  Errors terminate the request, success sets `req[id] = data`.\n\t */\n\tload({ params, gasPrices, web3 }, id, callback) {\n\t\tlet wallet = wallets.find( wallet => wallet.id===id ),\n\t\t\terr = wallet ? null : 'Not found';\n\t\tcallback(null, wallet);\n\n\t},\n\n\t/** GET / - List all entities */\n\tindex({ params, gasPrices, web3 }, res) {\n\t\t//console.log(gasPrices);\n\t\t//console.log(web3);\n\t\tconsole.log('index call----');\n\t\tconsole.log('req',params);\n\t\tres.json(wallets);\n\t},\n\n\t/** POST / - Create a new entity */\n\tcreate({ body }, res) {\n\t\tbody.id = wallets.length.toString(36);\n\t\twallets.push(body);\n\t\tres.json(body);\n\t},\n\n\t/** GET /:id - Return a given entity */\n\tread({ params, gasPrices, web3 }, res) {\n\t\tconsole.log('read call----');\n\t\tconsole.log('req',params);\n\n\t\tweb3.eth.getBalance(params.getBalance, function (error, result) {\n\t\t\tif (error) {\n\t\t\t\tconsole.log('error',error)\n\n\t\t\t\tres.json({\n\t\t      \t\t'response':'getBalance' ,\n\t\t      \t\t'error':JSON.stringify(error)\n\t\t      \t});\n\t\t\t} else {\n\t\t\t\tconsole.log('result',result.toString());\n\t\t\t\tlet balance = web3.fromWei(result.toString(), 'ether');\n\t\t\t\tconsole.log('balance',balance);\n\n\t\t\t\tres.json({\n\t\t      \t\t'response':'getBalance' ,\n\t\t      \t\t'balance':balance\n\t\t      \t});\n\t\t\t}\n\t    });\n\t},\n\n\t/** PUT /:id - Update a given entity */\n\tupdate({ wallet, body }, res) {\n\t\t//console.log(arguments);\n\t\tfor (let key in body) {\n\t\t\tif (key!=='id') {\n\t\t\t\twallet[key] = body[key];\n\t\t\t}\n\t\t}\n\t\tres.sendStatus(204);\n\t},\n\n\t/** DELETE /:id - Delete a given entity */\n\tdelete({ wallet }, res) {\n\t\twallets.splice(wallets.indexOf(wallet), 1);\n\t\tres.sendStatus(204);\n\t}\n});\n"]}