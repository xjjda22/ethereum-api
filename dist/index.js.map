{"version":3,"sources":["../src/index.js"],"names":["web3","walletAddress","balance","console","log","Web3","providers","HttpProvider","isConnected","app","use","req","res","next","connect_web3","axios","get","response","prices","low","data","safeLow","medium","average","high","fast","gasPrices","db","config","server","listen","process","env","PORT","port","address","getCurrentGasPrices","http","createServer","exposedHeaders","corsHeaders","bodyParser","json","limit","bodyLimit"],"mappings":";;;;;;AAuCA;;oEACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACKA,UADL,WACWC,aADX,GAC2B,EAD3B,EAC8BC,OAD9B,GACwC,CADxC;AAAA;;AAIEC,cAAQC,GAAR,CAAY,eAAZ;AAJF;AAAA,aAKgB,IAAIC,aAAJ,CAAU,IAAIA,cAAKC,SAAL,CAAeC,YAAnB,CAAgC,8DAAhC,CAAV,CALhB;;AAAA;AAKGP,UALH;;AAME;AACA;;AAEA,UAAI,CAAEA,KAAKQ,WAAL,EAAN,EAAyB;AACxBL,eAAQC,GAAR,CAAY,qBAAZ;AACA,OAFD,MAEK;AACJK,WAAIC,GAAJ,CAAS,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACvBF,YAAIX,IAAJ,GAAWA,IAAX;AACAa;AACH,QAHD;AAIA;AAhBH;AAAA;;AAAA;AAAA;AAAA;;AAkBEV,cAAQC,GAAR,CAAY,OAAZ;;AAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeU,Y;;;;;;qEAyBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACsBC,gBAAMC,GAAN,CAAU,gDAAV,CADtB;;AAAA;AACKC,cADL;AAEKC,YAFL,GAEc;AACbC,YAAKF,SAASG,IAAT,CAAcC,OAAd,GAAwB,EADhB;AAEbC,eAAQL,SAASG,IAAT,CAAcG,OAAd,GAAwB,EAFnB;AAGbC,aAAMP,SAASG,IAAT,CAAcK,IAAd,GAAqB;AAHd,OAFd;;;AAQCtB,cAAQC,GAAR,CAAY,oBAAZ,EAAkCa,SAASG,IAA3C;AACAjB,cAAQC,GAAR,CAAY,oBAAZ,EAAkCc,MAAlC;;AAEIQ,eAXL,GAWiBR,MAXjB;AAaKS,QAbL,GAaW,EAbX;;AAeC;;AAEAlB,UAAIC,GAAJ,CAAS,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACvBF,WAAIe,SAAJ,GAAgBA,SAAhB;AACAb;AACH,OAHD;;AAKA;AACAJ,UAAIC,GAAJ,CAAQ,0BAAW,EAAEkB,wBAAF,EAAUD,MAAV,EAAX,CAAR;;AAEA;AACAlB,UAAIC,GAAJ,CAAQ,MAAR,EAAgB,mBAAI,EAAEkB,wBAAF,EAAUD,MAAV,EAAJ,CAAhB;;AAEAlB,UAAIoB,MAAJ,CAAWC,MAAX,CAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBL,iBAAOM,IAA7C,EAAmD,YAAM;AACxD/B,eAAQC,GAAR,sBAA+BK,IAAIoB,MAAJ,CAAWM,OAAX,GAAqBD,IAApD;AACA,OAFD;;AA5BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeE,mB;;;;;AAjEf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAPA;;;AAUA,IAAI3B,MAAM,wBAAV;AACAA,IAAIoB,MAAJ,GAAaQ,eAAKC,YAAL,CAAkB7B,GAAlB,CAAb;;AAEA;AACAA,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;AACAD,IAAIC,GAAJ,CAAQ,oBAAK;AACZ6B,iBAAgBX,iBAAOY;AADX,CAAL,CAAR;;AAIA/B,IAAIC,GAAJ,CAAQ+B,qBAAWC,IAAX,CAAgB;AACvBC,QAAQf,iBAAOgB;AADQ,CAAhB,CAAR;AA8BA9B;;AAoCAsB;;kBAEe3B,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport initializeDb from './db';\nimport middleware from './middleware';\nimport api from './api';\nimport config from './config.json';\n\n\n//ethereum api \nimport Web3 from 'web3';\nimport Wallet from 'ethereumjs-wallet/hdkey';\nimport bip39 from 'bip39';\nimport hdkey from 'hdkey';\nimport ethUtil from 'ethjs-util';\nimport EthereumTx from 'ethereumjs-tx';\nimport axios from 'axios';\n\n\nlet app = express();\napp.server = http.createServer(app);\n\n// logger\napp.use(morgan('dev'));\n\n// 3rd party middleware\napp.use(cors({\n\texposedHeaders: config.corsHeaders\n}));\n\napp.use(bodyParser.json({\n\tlimit : config.bodyLimit\n}));\n\n\n\n\n//--------- start ether api -----------\nasync function connect_web3() {\n\tlet web3, walletAddress = [],balance = 0;\n\n\ttry{\n\t\tconsole.log('starting web3');\n\t \tweb3 = await new Web3( new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/P4692QP3VKFU6XTQDHV3H2WTWNBS137D2A\"));\n\t\t//web3 = new Web3(new Web3.providers.HttpProvider(\"https://api.myetherapi.com/rin\"));\n\t\t//web3 = new Web3(new Web3.providers.HttpProvider(\"https://ropsten.infura.io\"));\n\n\t\tif (! web3.isConnected()){\n\t\t\tconsole.log('Somethings wrong...')\n\t\t}else{\n\t\t\tapp.use( (req,res,next) => {\n\t\t\t    req.web3 = web3;\n\t\t\t    next();\n\t\t\t});\n\t\t}\n\t}catch(e){\n\t\tconsole.log('error',e);\n\t}\n\n}\nconnect_web3();\n\n\nasync function getCurrentGasPrices() {\n\tlet response = await axios.get('https://ethgasstation.info/json/ethgasAPI.json')\n\tlet prices = {\n\tlow: response.data.safeLow / 10,\n\tmedium: response.data.average / 10,\n\thigh: response.data.fast / 10\n\t}\n\n\tconsole.log('current gas prices', response.data);\n\tconsole.log('current gas prices', prices);\n\n\tlet gasPrices = prices;\n\n\tlet db  = {};\n\n\t//app.set('gasPrices', gasPrices);\n\n\tapp.use( (req,res,next) => {\n\t    req.gasPrices = gasPrices;\n\t    next();\n\t});\n\n\t// internal middleware\n\tapp.use(middleware({ config, db }));\n\n\t// api router\n\tapp.use('/api', api({ config, db }));\n\n\tapp.server.listen(process.env.PORT || config.port, () => {\n\t\tconsole.log(`Started on port ${app.server.address().port}`);\n\t});\n}\n\ngetCurrentGasPrices();\n\nexport default app;\n\n\n\n"]}